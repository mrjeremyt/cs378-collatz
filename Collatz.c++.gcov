        -:    0:Source:Collatz.c++
        -:    0:Programs:2
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2014
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <utility>  // make_pair, pair
        -:   14:#include <algorithm> //min, max
        -:   15:
        -:   16:#include "Collatz.h"
        -:   17:
        -:   18:// ------------
        -:   19:// collatz_read
        -:   20:// ------------
        -:   21:
function _Z12collatz_readRSi called 10 returned 100% blocks executed 90%
       10:   22:std::pair<int, int> collatz_read (std::istream& r) {
        -:   23:    int i;
       10:   24:    r >> i;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       10:   25:    if (!r) return std::make_pair(0, 0);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
call    5 returned 100%
        -:   26:    int j;
        8:   27:    r >> j;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        8:   28:    return std::make_pair(i, j);
call    0 returned 100%
call    1 never executed
        -:   29:}
        -:   30:
        -:   31:// ------------
        -:   32:// collatz_eval
        -:   33:// ------------
        -:   34:
function _Z12collatz_evalii called 9 returned 100% blocks executed 86%
        9:   35:int collatz_eval (int i, int j) {
        9:   36:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   37:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   38:
        9:   39:    int M_C_L = 0;
        -:   40:
        9:   41:    int top = std::max(i, j);
call    0 returned 100%
        9:   42:    int min = std::max(i, j >> 1);
call    0 returned 100%
        9:   43:    int bottom = std::min(min, j);
call    0 returned 100%
        -:   44:
      457:   45:    while(bottom <= top){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      439:   46:        int length = 1;
      439:   47:        int val = bottom;
    17718:   48:        while(val > 1){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
    16840:   49:            if(val % 2 == 0){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
     8572:   50:                val >>= 1;
        -:   51:            }else{
     8268:   52:                val += (val >> 1) + 1;
     8268:   53:                length += 1;
        -:   54:            }
    16840:   55:            length += 1;
        -:   56:        }
      439:   57:        assert(length > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      439:   58:        if(length > M_C_L){M_C_L = length;}
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      439:   59:        bottom++;
        -:   60:    }
        9:   61:    return M_C_L;
        -:   62:}
        -:   63:
        -:   64:
        -:   65:// -------------
        -:   66:// collatz_print
        -:   67:// -------------
        -:   68:
function _Z13collatz_printRSoiii called 8 returned 100% blocks executed 100%
        8:   69:void collatz_print (std::ostream& w, int i, int j, int v) {
        8:   70:    w << i << " " << j << " " << v << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        8:   71:}
        -:   72:
        -:   73:// -------------
        -:   74:// collatz_solve
        -:   75:// -------------
        -:   76:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 90%
        7:   77:void collatz_solve (std::istream& r, std::ostream& w) {
        5:   78:    while (true) {
        7:   79:        const std::pair<int, int> p = collatz_read(r);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        9:   80:        if (p == std::make_pair(0, 0)) return;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 71% (fallthrough)
branch  3 taken 29%
call    4 never executed
        5:   81:        const int v = collatz_eval(p.first, p.second);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        5:   82:        collatz_print(w, p.first, p.second, v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        -:   83:    }
function _GLOBAL__sub_I__Z12collatz_readRSi called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:   84:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
